[gd_resource type="VisualShader" load_steps=6 format=2]

[sub_resource type="VisualShaderNodeScalarUniform" id=18]
uniform_name = "HealthFactor"

[sub_resource type="VisualShaderNodeInput" id=19]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorDecompose" id=20]

[sub_resource type="VisualShaderNodeIf" id=21]
default_input_values = [ 0, 0.0, 1, 0.0, 2, 1e-05, 3, Vector3( 0, 0, 0 ), 4, Vector3( 1, 0, 0 ), 5, Vector3( 0, 0, 0 ) ]

[sub_resource type="VisualShaderNodeVectorDecompose" id=22]

[resource]
code = "shader_type canvas_item;
uniform float HealthFactor;



void vertex() {
// Output:0

}

void fragment() {
// ScalarUniform:2
	float n_out2p0 = HealthFactor;

// Input:4
	vec3 n_out4p0 = vec3(UV, 0.0);

// VectorDecompose:5
	float n_out5p0 = n_out4p0.x;
	float n_out5p1 = n_out4p0.y;
	float n_out5p2 = n_out4p0.z;

// If:6
	float n_in6p2 = 0.00001;
	vec3 n_in6p3 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_in6p4 = vec3(1.00000, 0.00000, 0.00000);
	vec3 n_in6p5 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_out6p0;
	if(abs(n_out2p0 - n_out5p0) < n_in6p2)
	{
		n_out6p0 = n_in6p3;
	}
	else if(n_out2p0 < n_out5p0)
	{
		n_out6p0 = n_in6p5;
	}
	else
	{
		n_out6p0 = n_in6p4;
	}

// VectorDecompose:7
	float n_out7p0 = n_out6p0.x;
	float n_out7p1 = n_out6p0.y;
	float n_out7p2 = n_out6p0.z;

// Output:0
	COLOR.a = n_out7p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -755.222, -63.4957 )
mode = 1
flags/light_only = false
nodes/fragment/2/node = SubResource( 18 )
nodes/fragment/2/position = Vector2( -460, 120 )
nodes/fragment/4/node = SubResource( 19 )
nodes/fragment/4/position = Vector2( -680, 240 )
nodes/fragment/5/node = SubResource( 20 )
nodes/fragment/5/position = Vector2( -460, 240 )
nodes/fragment/6/node = SubResource( 21 )
nodes/fragment/6/position = Vector2( -140, 100 )
nodes/fragment/7/node = SubResource( 22 )
nodes/fragment/7/position = Vector2( 120, 140 )
nodes/fragment/connections = PoolIntArray( 4, 0, 5, 0, 2, 0, 6, 0, 5, 0, 6, 1, 6, 0, 7, 0, 7, 0, 0, 1 )
