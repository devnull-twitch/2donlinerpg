[gd_resource type="VisualShader" load_steps=9 format=2]

[sub_resource type="VisualShaderNodeTextureUniform" id=9]
uniform_name = "TextureUniform"

[sub_resource type="VisualShaderNodeScalarUniform" id=12]
uniform_name = "Health"

[sub_resource type="VisualShaderNodeIf" id=13]

[sub_resource type="VisualShaderNodeVectorDecompose" id=14]

[sub_resource type="VisualShaderNodeScalarOp" id=15]

[sub_resource type="VisualShaderNodeScalarOp" id=16]

[sub_resource type="VisualShaderNodeVectorCompose" id=17]

[sub_resource type="VisualShaderNodeVectorOp" id=18]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0.3, 0.3, 0.3 ) ]
operator = 2

[resource]
code = "shader_type canvas_item;
uniform float Health;
uniform sampler2D TextureUniform;



void vertex() {
// Output:0

}

void fragment() {
// ScalarUniform:3
	float n_out3p0 = Health;

// TextureUniform:2
	vec3 n_out2p0;
	float n_out2p1;
	{
		vec4 n_tex_read = texture(TextureUniform, UV.xy);
		n_out2p0 = n_tex_read.rgb;
		n_out2p1 = n_tex_read.a;
	}

// VectorDecompose:5
	float n_out5p0 = n_out2p0.x;
	float n_out5p1 = n_out2p0.y;
	float n_out5p2 = n_out2p0.z;

// ScalarOp:6
	float n_out6p0 = n_out5p0 + n_out5p1;

// ScalarOp:7
	float n_out7p0 = n_out6p0 + n_out5p2;

// VectorCompose:8
	vec3 n_out8p0 = vec3(n_out7p0, n_out7p0, n_out7p0);

// VectorOp:9
	vec3 n_in9p1 = vec3(0.30000, 0.30000, 0.30000);
	vec3 n_out9p0 = n_out8p0 * n_in9p1;

// If:4
	float n_in4p1 = 0.00000;
	float n_in4p2 = 0.00001;
	vec3 n_in4p5 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_out4p0;
	if(abs(n_out3p0 - n_in4p1) < n_in4p2)
	{
		n_out4p0 = n_out9p0;
	}
	else if(n_out3p0 < n_in4p1)
	{
		n_out4p0 = n_in4p5;
	}
	else
	{
		n_out4p0 = n_out2p0;
	}

// Output:0
	COLOR.rgb = n_out4p0;
	COLOR.a = n_out2p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -1103.36, -63.4957 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 340, 240 )
nodes/fragment/2/node = SubResource( 9 )
nodes/fragment/2/position = Vector2( -1600, 180 )
nodes/fragment/3/node = SubResource( 12 )
nodes/fragment/3/position = Vector2( -620, -80 )
nodes/fragment/4/node = SubResource( 13 )
nodes/fragment/4/position = Vector2( 20, 80 )
nodes/fragment/5/node = SubResource( 14 )
nodes/fragment/5/position = Vector2( -1340, 80 )
nodes/fragment/6/node = SubResource( 15 )
nodes/fragment/6/position = Vector2( -1060, -60 )
nodes/fragment/7/node = SubResource( 16 )
nodes/fragment/7/position = Vector2( -860, 80 )
nodes/fragment/8/node = SubResource( 17 )
nodes/fragment/8/position = Vector2( -660, 100 )
nodes/fragment/9/node = SubResource( 18 )
nodes/fragment/9/position = Vector2( -440, 60 )
nodes/fragment/connections = PoolIntArray( 2, 1, 0, 1, 3, 0, 4, 0, 2, 0, 4, 4, 4, 0, 0, 0, 2, 0, 5, 0, 5, 0, 6, 0, 5, 1, 6, 1, 6, 0, 7, 0, 5, 2, 7, 1, 7, 0, 8, 0, 7, 0, 8, 1, 7, 0, 8, 2, 8, 0, 9, 0, 9, 0, 4, 3 )
